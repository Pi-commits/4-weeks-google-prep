from collections import defaultdict
class Solution:
    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        graph = defaultdict(set)
        for u, v in edges:
            graph[u].add(v)
            graph[v].add(u)

        min_degree = float('inf')

        for i in range(1, n+1):
            for j in range(i+1, n+1):

                if j not in graph[i]:
                    continue

                for k in range(j+1, n+1):

                    if i in graph[j] and j in graph[k] and k in graph[i]:
                        min_degree = min(min_degree, len(graph[i]) + len(graph[j]) + len(graph[k]) - 6)

        return min_degree if min_degree != float('inf') else -1


# Problem Link: https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/
# SC: O(n^2)
# TC: O(N^3)
